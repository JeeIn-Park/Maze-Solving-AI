solve_task_bfs(Task,[P|Ps],Path) :-
    achieved(Task,P), reverse([P|Ps],Path)
    ;
    map_adjacent(P,Q,empty), \+ member(Q,Ps),
    solve_task_bfs(Task,[Q,P|Ps],Path).


solve_task_bfs(Queue,Visited,Path) :-
    Queue = [Next|Rest],
    Next = [Pos|RPath],
    (complete(Pos) -> reverse([Pos|RPath],[_|Path])
    ;otherwise     -> (findall([NP,Pos|RPath],
                               (map_adjacent(Pos,NP,empty),\+ member(NP,Visited), \+ member([NP|_],Rest)),
                               Newfound),
                      append(Rest,Newfound,NewQueue),
                      solve_task_bfs(NewQueue,[Pos|Visited],Path))).
                      
                      
                      
                      
                      

search_bf(Queue, Visited, Path) :-
    Queue = [Next|Rest],
    Next = [Pos|RPath],
    (complete(Current) -> reverse([Pos|RPath], Path)
    ;otherwise -> (
        findall([NP,Pos|RPath],
        (map_adjacent(Pos, NP, empty),
        \+member(NP, Visited),
        \+member([NP|_], Rest)
        ), NewFound),
        append(Rest, NewFound, NewQueue), 
        search_bf(NewQueue, [Pos|Visited], Path))
    ).
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
findall([P], map_adjacent(P, Adj, o(ID)), List),
search_bf(List, [], Path)),
    
    
search_bf(Queue, Visited, Path) :-
    Queue = [Next|Rest],
    Next = [Pos|RPath],
    (complete(Current) -> reverse([Pos|RPath], Path)
    ;otherwise -> (
        findall([NP,Pos|RPath],
        (map_adjacent(Pos, NP, empty),
        \+member(NP, Visited),
        \+member([NP|_], Rest),
        member(Pos, waiting list)
        ), NewFound),
        append(Rest, NewFound, NewQueue), 
        search_bf(NewQueue, [Pos|Visited], Path))
    ).
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
get_agent_position(Agent, P),  	
search_nearest_node([[P]], [], Path, Waiting_list),

search_nearest_node(Queue, Visited, Path, Waiting_list) :-
    Queue = [Next|Rest],
    Next = [Pos|RPath],
    (member(path(Pos, _), Waiting_list) -> reverse([Pos|RPath],[_|Path])
    ;otherwise     -> (findall([NP,Pos|RPath],
                               ((map_adjacent(Pos,NP,empty) ; map_adjacent(Post, NP, a(_)),
                               \+ member(NP, Visited), 
                               \+ member([NP|_],Rest)),
                               Newfound),
                      append(Rest,Newfound,NewQueue),
                      search_nearest_node(NewQueue,[Pos|Visited],Path))).
    
    

    
    
    
    
    
    
    
    
    
    
    

search_nearest_node([[P]], [], Path, Waiting_list),

search_nearest_node(Queue, Visited, Path, Waiting_list) :-
    Queue = [Next|Rest],
    Next = [Pos|RPath],
    (member(path(Pos, _), Waiting_list) -> reverse([Pos|RPath],[_|Path])
    ;otherwise     -> (findall([NP,Pos|RPath],
                               ((map_adjacent(Pos,NP,empty) ; map_adjacent(Post, NP, a(_)),
                               \+ member(NP, Visited), 
                               \+ member([NP|_],Rest)),
                               Newfound),
                      append(Rest,Newfound,NewQueue),
                      search_nearest_node(NewQueue,[Pos|Visited],Path))).
    
    































    
    
    
    
    
    
    
    
    
    
